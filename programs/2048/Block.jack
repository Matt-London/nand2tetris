/**
 * Class to represent a Block within a 2048 board
 *
 * @author Matt London
 */
class Block {
    /** Power that 2 is raised to in order to produce the number */
    field int power;
    /** Number that results from the calculation */
    field int number;
    /** If the block is filled or empty */
    field boolean filled;

    /** Base to use in calculations (default is 2) */
    static int base;

    /**
     * Constructor for the block object
     *
     * @param power Power to set number to initially
     */
    constructor Block new(int pow) {
        let base = 2;
        let power = pow;
        let number = 1;
        let filled = true;

        // Calculate what the number should be
        do calcNumber();

        return this;
    }

    /**
     * Sets the number based on the power
     */
    method void calcNumber() {
        var int i;
        let i = 0;
        
        // Loop and multiply until we reach the power
        while (i < power) {
            let number = base * number;
            let i = i + 1;
        }

        return;
    }

    /**
     * Get the number set in the block
     *
     * @return number
     */
    method int getNumber() {
        return number;
    }

    /**
     * Get the power of the block
     *
     * @return power
     */
    method int getPower() {
        return power;
    }

    /**
     * Increments the power by 1 and then recalculates the number
     */
    method void incrementPower() {
        let power = power + 1;
        do calcNumber();
        return;
    }

    /**
     * Set whether the block is filled or not
     *
     * @param f Filled status of the block
     */
    method void setFilled(boolean f) {
        let filled = f;

        // If it's not filled we need to set everything to 0
        if (~filled) {
            let power = 0;
            let number = 0;
        }

        return;
    }

    /**
     * Get if the block is filled or not
     *
     * @return filled status
     */
    method boolean isFilled() {
        return filled;
    }

}